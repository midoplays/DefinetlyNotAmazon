{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-product\"\n};\nconst _hoisted_2 = {\n  class: \"image mb-6\"\n};\nconst _hoisted_3 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"figure\", _hoisted_2, [_createElementVNode(\"img\", {\n    src: $data.product.image\n  }, null, 8 /* PROPS */, _hoisted_3)])]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAc;;EACfA,KAAK,EAAC;AAAY;;;uBAD5BC,oBAIM,OAJNC,UAIM,GAHJC,oBAES,UAFTC,UAES,GADLD,oBAAgC;IAApBE,GAAG,EAAEC,aAAO,CAACC","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","src","$data","image"],"sourceRoot":"","sources":["C:\\Users\\ASUS\\Coding\\Python\\DefinetlyNotAmazon\\frontend\\src\\views\\ProductView.vue"],"sourcesContent":["<template>\r\n  <div class=\"page-product\">\r\n    <figure class=\"image mb-6\">\r\n        <img v-bind:src=\"product.image\">\r\n    </figure>\r\n  </div>\r\n  \r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { toast } from 'bulma-toast'\r\n\r\nexport default {\r\n    name: 'ProductView',\r\n    data() {\r\n        return {\r\n            product: {},\r\n            quantity: 1\r\n        }\r\n    }, \r\n    mounted() {\r\n    this.getProduct()\r\n    },\r\n    methods: {\r\n        getProduct() {\r\n          const id_slug = this.$route.params.product.product_id\r\n          \r\n          axios.get('/product/:id')\r\n        //   .then(response => {\r\n        //     this.product = response.data\r\n        //     console.log(response.data)\r\n        //   })\r\n        //   .catch(error => {\r\n        //     console.log(error)\r\n        //   })\r\n\r\n          // changing tab name\r\n          document.title = this.product.name + ' | HighTech'\r\n\r\n        },\r\n        addToCart() {\r\n            // correct quantity value if any changes happen to it\r\n            if (isNaN(this.quantity || this.quantity < 1)) {\r\n                this.quantity = 1\r\n            }\r\n\r\n            const item = {\r\n                product: this.product,\r\n                quantity: this.quantity\r\n            }\r\n\r\n            this.$store.commit('addToCart', item)\r\n\r\n            toast ({\r\n                message: 'The product was added to cart',\r\n                type: 'is-info',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n                duration: 2000,\r\n                position: 'bottom-right'\r\n            })\r\n        },\r\n       \r\n    }\r\n}\r\n\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}